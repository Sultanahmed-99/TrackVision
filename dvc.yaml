# Intergreating pipelines into dvc yaml 
# By spliting each pipeline into stages 
stages:
  data_ingestion:
    # execute the command to run the pipeline stage
    cmd: python srcTrackVision/pipeline/stage_01_data_ingestion.py
    # specify the dependencies for this stage
    deps:
      - srcTrackVision/pipeline/stage_01_data_ingestion.py
      - config/config.yaml
    # specify the outputs generated by this stage
    outs:
      - artifacts/data_ingestion/archive

 
   
  preaper_base_model:
    cmd: python srcTrackVision/pipeline/stage_02_prepare_base_model.py 

    deps:
       - srcTrackVision/pipeline/stage_02_prepare_base_model.py 
       - config/config.yaml

    params:
      - MODEL_NAME  
      - AUGMENTATION
      - IMAGE_SIZE 
      - BATCH_SIZE
      - INCLUDE_TOP 
      - EPOCHS
      - CLASSES
      - WEIGHTS  
      - LEARNING_RATE 

    outs: 
       - artifacts/preaper_base_model


  training:
    cmd: python srcTrackVision/pipeline/stage_03_model_training.py

    deps: 
       - srcTrackVision/pipeline/stage_03_model_training.py
       - srcTrackVision/components/preaper_model_callbacks.py
       - config/config.yaml
       - artifacts/data_ingestion/archive
       - artifacts/preaper_base_model

    params:
      - IMAGE_SIZE 
      - BATCH_SIZE
      - AUGMENTATION
      - EPOCHS

    outs:
      - artifacts/training/model.h5
    
  evaluation:
    cmd : python srcTrackVision/pipeline/stage_04_model_evaluation.py


    deps:
       - srcTrackVision/pipeline/stage_04_model_evaluation.py
       - config/config.yaml
       - artifacts/data_ingestion/archive
       - artifacts/training/model.h5
      
    params:
      - IMAGE_SIZE
      - BATCH_SIZE

    metrics:
       - scores.json:
          cache: false
         